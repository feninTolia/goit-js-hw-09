{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,SAAS,EAETC,aAAc,OACdC,QAAS,IACTC,SAAU,OACVC,cAAc,IAGhB,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,OAAQF,SAASC,cAAc,mBAC/BE,KAAMH,SAASC,cAAc,iBAC7BG,MAAOJ,SAASC,cAAc,mBAGhC,SAASI,EAAcC,EAAUF,GAC/B,IAAMG,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEL,WAAUF,UAEpBQ,EAAO,CAAEN,WAAUF,YAEpBA,MAIPN,EAAKC,KAAKe,iBAAiB,UAAU,SAAAC,GACnCA,EAAEC,iBAKF,IAHA,IAAIC,EAAQC,OAAOpB,EAAKM,MAAMe,OAC1BhB,EAAOe,OAAOpB,EAAKK,KAAKgB,OAEnBC,EAAI,EAAGA,GAAKF,OAAOpB,EAAKI,OAAOiB,OAAQC,GAAK,EACnDf,EAAce,EAAGH,GACdI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUF,EAAKkB,EAALlB,MACjBd,EAAAF,GAASG,OAAOgC,QACd,uBAAwCC,OAAflB,EAAS,QAAYkB,OAANpB,EAAM,UAGjDqB,OAAM,SAAAH,G,IAAGhB,EAAQgB,EAARhB,SAAUF,EAAKkB,EAALlB,MAClBd,EAAAF,GAASG,OAAOmC,QACd,sBAAuCF,OAAflB,EAAS,QAAYkB,OAANpB,EAAM,UAGnDa,GAASd,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  useIcon: false,\n\n  borderRadius: '20px',\n  timeout: 4000,\n  fontSize: '16px',\n  clickToClose: true,\n});\n\nconst refs = {\n  form: document.querySelector('.form'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  delay: document.querySelector('[name=\"delay\"]'),\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n\n  let delay = Number(refs.delay.value);\n  let step = Number(refs.step.value);\n\n  for (let i = 1; i <= Number(refs.amount.value); i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n});\n\n// ! Майже правильне вирішення через 2 проміса\n// let firstDelay = null;\n// let step = null;\n// let position = null;\n// let notifyTimerDelay = 0;\n// let promiseMessageDelay = 0;\n\n// function fristDelayPromise() {\n//   return new Promise(resolve => {\n//     setTimeout(() => {\n//       resolve();\n//     }, firstDelay);\n//   });\n// }\n\n// function createPromise(position, step) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       resolve({ position, step });\n//     } else {\n//       reject({ position, step });\n//     }\n//   });\n// }\n\n// refs.form.addEventListener('input', e => {\n//   position = refs.form.amount.value;\n//   step = Number(refs.form.step.value);\n//   firstDelay = Number(refs.form.delay.value);\n// });\n\n// refs.form.addEventListener('submit', e => {\n//   e.preventDefault();\n\n//   fristDelayPromise().then(() => {\n//     promiseMessageDelay = firstDelay;\n//     notifyTimerDelay -= step;\n\n//     for (let i = 1; i <= position; i++) {\n//       setTimeout(() => {\n//         createPromise(i, promiseMessageDelay)\n//           .then(({ position, step }) => {\n//             Notiflix.Notify.success(\n//               `✅ Fulfilled promise ${position} in ${step}ms`\n//             );\n//           })\n\n//           .catch(({ position, step }) => {\n//             Notiflix.Notify.success(\n//               `❌ Rejected promise ${position} in ${step}ms`\n//             );\n//           });\n\n//         promiseMessageDelay += step;\n//       }, (notifyTimerDelay += step));\n//     }\n//   });\n\n//   // refs.form.reset();\n// });\n"],"names":["$iU1Pc","parcelRequire","$parcel$interopDefault","Notify","init","useIcon","borderRadius","timeout","fontSize","clickToClose","$ce04d3a99e08e73b$var$refs","form","document","querySelector","amount","step","delay","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.dfad23d8.js.map"}